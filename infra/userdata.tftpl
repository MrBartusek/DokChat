#!/bin/bash

# Update System
sudo yum update -y

# Setup NGINX
sudo amazon-linux-extras install nginx1 -y
sudo amazon-linux-extras enable nginx1
sudo systemctl enable nginx
sudo systemctl start nginx
cat > /etc/nginx/conf.d/dokchat.dokurno.dev.conf <<EOL
# DokChat Reverse Proxy Config

server {
    listen 80 default_server;
    listen [::]:80 default_server;
    server_name _;

    location / {
        proxy_pass http://localhost:8080;

        # Allow for websocket connections
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header Host \$host;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection "upgrade";
        }
}
EOL
sudo chown -R ec2-user /etc/nginx/conf.d/dokchat.dokurno.dev.conf
sudo systemctl restart nginx

# Install CertBot
sudo amazon-linux-extras install epel
sudo yum install certbot -y
sudo yum install python-certbot-nginx -y

# Install GIT
sudo yum install git -y

# Install Docker
sudo amazon-linux-extras install docker
sudo service docker start
sudo usermod -a -G docker ec2-user
sudo chkconfig docker on # Docker autostart

# Install Compose
sudo curl -L https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
sudo chmod +x /usr/local/bin/docker-compose
sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose # Add docker to PATH

# Build DokChat
cd home/ec2-user
git clone https://github.com/MrBartusek/DokChat.git
cd DokChat

cat > .env <<EOL
##############################
# DOKCHAT CONFIGURATION FILE #
##############################

# AUTO-GENERATED BY TERRAFROM USER-DATA

# [ GENERAL ]
# The environment that project runs in, development/production
NODE_ENV = 'production'
# Enable security measures - CSP, CORS, Upgrade-Insecure-Requests and similar
ENABLE_HELMET = false

# [ AMAZON WEB SERVICES CONFIG ]
# All of these are reqired fields, DokChat was desinged to run on AWS
AWS_BUCKET_NAME = "${s3_bucket_name}"
AWS_REGION = "${aws_region}"
AWS_ACCESS_KEY_ID="${access_key_id}"
AWS_SECRET_ACCESS_KEY="${access_key_secret}"

# [ JWT SECRETS CONFIG ]
# Set every token to diffrent random string 
JWT_USER_TOKEN_SECRET = "${jwt_secret_1}"
JWT_REFRESH_TOKEN_SECRET = "${jwt_secret_2}"
JWT_PASS_RESET_TOKEN_SECRET = "${jwt_secret_3}"
JWT_EMAIL_CONFIRM_TOKEN_SECRET = "${jwt_secret_4}"

# [ EMAIL SERVICE ]
# Enable DokChat to send account confirmation and similar e-mails, they are all transactional
ENABLE_EMAIL_SERVICE = false
SES_EMAIL_SENDER = "DokChat <no-reply@CHANGE_ME.com>"
SES_CONFIGURATION_SET_NAME = "${sqs_config_set}"

# [ EMAIL BOUNCES/COMPLAINTS HANDLING ]
# Bounces and complaints handling module, this is reqired in order to leave SES Sandbox
ENABLE_SNS_BOUNCES_HANDLING = true
SQS_COMPLAINTS_URL = "${sqs_complaints_queue}"
SQS_BOUNCES_URL = "${sqs_bounces_queue}"

# [ SOCIAL LOGIN ]
# Facebook and Google OAuth register and login
ENABLE_SOCIAL_LOGIN = false
GOOGLE_CLIENT_ID = ""
FACEBOOK_CLIENT_ID = ""

# [ reCAPTCHA ]
# Prevent bots on /register and /forgot-password
ENABLE_RECAPTCHA = false
RECAPTCHA_SITE_KEY = ""
RECAPTCHA_SECRET = ""

# [ TENOR ]
# gif-picker-react for messages
ENABLE_TENOR = false
TENOR_API_KEY = "${tenor_apikey}"
EOL

sudo chown -R ec2-user .

docker-compose -f docker-compose.yaml -f docker-compose.prod.yaml up -d

reboot
